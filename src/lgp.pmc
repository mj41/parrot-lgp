#include "parrot/parrot.h"


#define MAX_POP_SIZE 500000     // maximal population size
#define INDI_MAX_LEN 100        // maximal individual length
/*
    used virtual memory size: around MAX_POP_SIZE * INDI_MAX_LEN * 4 B
    POP_SIZE = 500.000, INDI_MAX_LEN = 100 -> 200 MB
*/


#define FIGHT_NUM 2             // number of fights in each run

// typedef INTVAL fitness_t;
// fitness_t is not recognized in method signature

// individual structure - fixed size array
typedef struct lgp_indi {
    INTVAL          fitness;
    opcode_t        code[INDI_MAX_LEN];
    size_t          len;
} t_lgp_indi;

INTVAL pop_size = 0;
typedef t_lgp_indi t_pop[MAX_POP_SIZE + FIGHT_NUM];
t_pop pop;

INTVAL lgp_in_reg_count  = 3; // number of input registers
// input register's numbers
INTVAL lgp_in_regs[] = {
    0, 1, 2
};

INTVAL lgp_out_reg_count  = 1; // number of output registers
// output register's numbers
INTVAL lgp_out_regs[] = {
    3
};

INTVAL lgp_op_count  = 17; // number of operators
/*
    List of allowed instructions. Used to initialize code, and for genetic operations.
*/
opcode_t lgp_ops[] = {
    // 119, // 0 ... band_i_i: i(io), i(i)
    // 121, // 1 ... band_i_i_i: i(o), i(i), i(i)
    // 129, // 2 ... bnot_i: i(io)
    // 130, // 3 ... bnot_i_i: i(o), i(i)
    // 140, // 4 ... bor_i_i: i(io), i(i)
    // 142, // 5 ... bor_i_i_i: i(o), i(i), i(i)
    // 150, // 6 ... shl_i_i: i(io), i(i)
    // 152, // 7 ... shl_i_i_i: i(o), i(i), i(i)
    // 155, // 8 ... shr_i_i: i(io), i(i)
    // 157, // 9 ... shr_i_i_i: i(o), i(i), i(i)
    // 160, // 10 ... lsr_i_i: i(o), i(i)
    // 162, // 11 ... lsr_i_i_i: i(o), i(i), i(i)
    // 168, // 12 ... bxor_i_i: i(io), i(i)
    // 170, // 13 ... bxor_i_i_i: i(o), i(i), i(i)
    // 282, // 14 ... cmp_i_i_i: i(o), i(i), i(i)
    // 356, // 15 ... and_i_i_i: i(o), i(i), i(i)
    // 359, // 16 ... not_i: i(io)
    // 360, // 17 ... not_i_i: i(o), i(i)
    // 364, // 18 ... or_i_i_i: i(o), i(i), i(i)
    // 367, // 19 ... xor_i_i_i: i(o), i(i), i(i)
    496, // 20 ... abs_i: i(io)
    498, // 21 ... abs_i_i: i(o), i(i)
    503, // 22 ... add_i_i: i(io), i(i)
    507, // 23 ... add_i_i_i: i(o), i(i), i(i)
    // 513, // 24 ... cmod_i_i_i: i(o), i(i), i(i)
    519, // 25 ... dec_i: i(io)
    522, // 26 ... div_i_i: i(io), i(i)
    526, // 27 ... div_i_i_i: i(o), i(i), i(i)
    // 534, // 28 ... fdiv_i_i: i(io), i(i)
    // 538, // 29 ... fdiv_i_i_i: i(o), i(i), i(i)
    550, // 30 ... inc_i: i(io)
    // 553, // 31 ... mod_i_i: i(io), i(i)
    // 555, // 32 ... mod_i_i_i: i(o), i(i), i(i)
    563, // 33 ... mul_i_i: i(io), i(i)
    567, // 34 ... mul_i_i_i: i(o), i(i), i(i)
    // 573, // 35 ... neg_i: i(io)
    // 576, // 36 ... neg_i_i: i(o), i(i)
    583, // 37 ... sub_i_i: i(io), i(i)
    587, // 38 ... sub_i_i_i: i(o), i(i), i(i)
    810, // 39 ... exchange_i_i: i(io), i(io)
    814, // 40 ... set_i_i: i(o), i(i)
    917, // 41 ... null_i: i(o)

      1, // 27 .. noop
     16 // 28 .. ret
};

// 34 .. returncc


int init_done = 0; // initialization status
opcode_t *epc_start; // pointer to first instruction of eval space
opcode_t *epc_end;
/*
    Pointer to first instruction of individual code (the end of eval space)
*/
opcode_t *ipc_start;
opcode_t *ipc_end;


// part of quicksort function below
static int
Parrot_quicksort_fitness_partition(INTVAL a[], int p, int r) {
    int x = a[r];
    int j = p - 1;
    int i;
    int temp;
    for (i = p; i < r; i++) {
        if ( pop[ x ].fitness <= pop[ a[i] ].fitness ) {
            j = j + 1;
            temp = a[j];
            a[j] = a[i];
            a[i] = temp;
        }
    }
    a[r] = a[j + 1];
    a[j + 1] = x;

    return (j + 1);
}

// sort function, uset to sort get fight results
static void
Parrot_quicksort_fitness (INTVAL a[], int p, int r) {
    if (p < r) {
        int q = Parrot_quicksort_fitness_partition(a, p, r);
        Parrot_quicksort_fitness(a, p, q - 1);
        Parrot_quicksort_fitness(a, q + 1, r);
    }
}


/*
    Dump function whitch prints opcodes. Pc is pointer to begin of instruction
    - can't point to the operator. Copied from Parrot source.
*/
static void
Parrot_dump_from_to (Interp* interp, opcode_t *pc, opcode_t *pc_end) {

    //PIO_printf(interp, "----- %p\n", pc );
    //PIO_printf(interp, "----- %p\n", pc_end );
    op_info_t* info;
    int j, rop_num, op_num;
    rop_num = 0;
    op_num = 0;
    while ( pc < pc_end ) {
        info = &interp->op_info_table[*pc];
        PIO_printf(interp, "%3i +%1i %3i %p", rop_num, info->op_count, op_num, pc );

        PIO_printf(interp, " %4ld", *pc );
        PIO_printf(interp, " %s", info->full_name );
        for (j = 1; j < info->op_count; j++) {
            INTVAL i = 0;
            switch (info->types[j-1]) {
                case PARROT_ARG_I:
                    PIO_printf(interp," I");
                    goto INTEGER;
                case PARROT_ARG_N:
                    PIO_printf(interp," N");
                    goto INTEGER;
                case PARROT_ARG_S:
                    PIO_printf(interp," S");
                    goto INTEGER;
                case PARROT_ARG_P:
                    PIO_printf(interp," P");
                    goto INTEGER;
                case PARROT_ARG_IC:
                    PIO_printf(interp," ");
                    if ((j == info->op_count - 1) &&
                        (info->jump & PARROT_JUMP_RELATIVE))
                    {
                        if (pc[j] > 0) PIO_printf(interp,"+");
                        i = pc[j];
                    }

                    INTEGER:
                    if (i == 0) i = (INTVAL) pc[j];
                    PIO_printf(interp, INTVAL_FMT, i);
                    break;

                default:
                    PIO_printf(interp, " |" );
                    PIO_printf(interp, INTVAL_FMT, (INTVAL) pc[j]);
                    PIO_printf(interp, "|" );
                    break;

            }
            if (j != info->op_count - 1)
                PIO_printf(interp,",");
        }

        PIO_printf(interp, "\n" );
        pc += info->op_count;
        rop_num++;
        op_num += info->op_count;
    }
}


// LGP class
pmclass LGP need_ext dynpmc {

    /*
        Validate and prepare eval space.
        For required eval space PIR structure see tests (t/*.pir).
    */
    METHOD prepare_eval_space (PMC* pmcsub) {
        struct Parrot_sub *sub = PMC_sub(pmcsub);
        opcode_t *pc;
        opcode_t *pc_end;

        if ( init_done == 2 ) {
            PIO_eprintf(interp, "You need call prepare_sub() only once.");
            Parrot_exit(interp, 1);
        }

        // find INDI_CORE
        epc_start = sub->seg->base.data + sub->start_offs;
        epc_end = sub->seg->base.data + sub->end_offs;
        //Parrot_dump_from_to(interp, epc_start, epc_end);

        pc = epc_end - 1;
        if ( *pc != 16 ) {
            //PIO_eprintf(interp, "%p %ld\n", pc, *pc);
            PIO_eprintf(interp, "Last instruction is not ret (16).\n");
            Parrot_exit(interp, 1);
        }

        pc = pc - 2; // length of bsr is 2

        if ( *pc != 15 ) {
            PIO_eprintf(interp, "Last but one instruction is not bsr (15).\n");
            //PIO_eprintf(interp, "%p %ld\n", pc, *pc);
            Parrot_exit(interp, 1);
        }
        //PIO_printf(interp, "bsr to %ld\n", (INTVAL) pc[1] );
        ipc_start = pc + pc[1]; // pc[1] is negative offset
        ipc_end = epc_end;

        // change "bsr INDI_CORE" to "ret\nret"
        *pc = 16; // ret
        *(pc+1) = 16; // ret
        //PIO_eprintf(interp, "%p %ld, %p %ld\n", ipc_start, *ipc_start, ipc_end, *ipc_end);

        init_done = 1;
    }


    /*
        Copy pmcsub to individual part of eval space. Pmcsub can be create directly from PIR code.
        Useful for testing or human predefined individuals.
    */
    METHOD set_ic (PMC* pmcsub) {
        struct Parrot_sub *sub = PMC_sub(pmcsub);

        opcode_t *sub_start;
        opcode_t *sub_end;
        sub_start = sub->seg->base.data + sub->start_offs;
        sub_end = sub->seg->base.data + sub->end_offs;
        //Parrot_dump_from_to(interp, sub_start, sub_end);
        //PIO_eprintf(interp, "%ld\n\n", sub_end - sub_start);
        memcpy(ipc_start, sub_start, (sub_end - sub_start)*sizeof(opcode_t) );
    }

    /* set population size */
    METHOD set_pop_size (INTVAL t_pop_size) {
        if ( t_pop_size > MAX_POP_SIZE ) {
            PIO_eprintf(interp, "pop_size <= MAX_POP_SIZE (%i <= %i) failed\n", t_pop_size, MAX_POP_SIZE);
            Parrot_exit(interp, 1);
        }

        if ( t_pop_size < FIGHT_NUM*2 ) {
            PIO_eprintf(interp, "pop_size >= FIGHT_NUM*2 (%i >= %i) failed\n", t_pop_size, FIGHT_NUM*2);
            Parrot_exit(interp, 1);
        }
        pop_size = t_pop_size;
    }

    /* validate configuration */
    METHOD validate_conf () {
        // length of eval space individual core has to be longer or equal to INDI_MAX_LEN
        if ( ipc_end - ipc_start != INDI_MAX_LEN ) {
            if ( ipc_end - ipc_start > INDI_MAX_LEN ) {
                // PIO_eprintf(interp, "eval_space() len > INDI_MAX_LEN (%i > %i)\n", ipc_end - ipc_start, INDI_MAX_LEN);
            } else {
                PIO_eprintf(interp, "eval_space() != INDI_MAX_LEN len (%i != %i)\n", ipc_end - ipc_start, INDI_MAX_LEN);
                Parrot_exit(interp, 1);
            }
        }

        if ( pop_size == 0 ) {
            PIO_eprintf(interp, "pop_size is not set.\n");
            Parrot_exit(interp, 1);
        }
    }

    /* initialize population */
    METHOD initialize (INTVAL inum) {
        opcode_t *ipc_s, *ipc;
        INTVAL g_last, last;
        INTVAL r_op, r_i, j;
        op_info_t *info;

        // randomize
        srand((unsigned) time(NULL) );

        ipc_s = pop[inum].code;

        g_last = rand() % ( INDI_MAX_LEN - 1 ) + 1;
        pop[inum].fitness = 0;
        pop[inum].len = g_last + 1;

        //PIO_printf(interp, "b--- %p %i (+%i)\n", ipc, *ipc, g_last );
        ipc = ipc_s + g_last;
        *ipc = 16; // ret
        //PIO_printf(interp, "r--- %p %i\n", ipc, *ipc );
        last = g_last - 1;

        while ( last >= 0 ) {
            //PIO_printf(interp, "----------------- %i z %i\n", last+1, g_last+1);
            //PIO_printf(interp, "r_op: " );
            do {
                r_op = lgp_ops[ rand() % lgp_op_count ];
                info = &interp->op_info_table[r_op];
                //PIO_printf(interp, "%i (%i), ", r_op, info->op_count-1 );
            } while ( info->op_count-1 > last );
            //PIO_printf(interp, "%s \n", info->full_name );
            ipc = &*(ipc - info->op_count);
            *ipc = r_op;
            //Parrot_dump_from_to(interp, ipc_s, &*(ipc_s + pop[inum].len) );
            //PIO_printf(interp, "\n");

            for (j = 0; j < (info->op_count-1); j++) {
                switch (info->types[j]) {
                    case PARROT_ARG_I:
                        r_i = rand() % (lgp_out_reg_count + lgp_in_reg_count);
                        if ( r_i < lgp_out_reg_count ) {
                            r_i = lgp_out_regs[ r_i ];
                        } else {
                            r_i -= lgp_out_reg_count;
                            r_i = lgp_in_regs[ r_i ];
                        }
                        //PIO_printf(interp, "r_i %i z %i: %i\n", j+1, (info->op_count-1), r_i );
                        *(ipc+j+1) = r_i;
                        break;
                    default:
                        PIO_eprintf(interp, "Can't generate operand with type=%i, op_count=%i, op=%i\n", info->types[j], info->op_count, r_op );
                        exit;
                        break;
                }
            }
            last = last - info->op_count;
            //Parrot_dump_from_to(interp, ipc_s, &*(ipc_s + pop[inum].len ) );
        }
    }

    /* print individual code with number inum */
    METHOD indi_code (INTVAL inum) {
        // pop[num] individual code dump
        opcode_t *ipc_s;
        ipc_s = pop[inum].code;
        Parrot_dump_from_to(interp, ipc_s, &*(ipc_s + pop[inum].len) );
    }

    /* print temporary individual code with number temp_inum */
    METHOD temp_indi_code (INTVAL temp_inum) {
        // pop[pop_size + temp_inum] individual code dump
        opcode_t *ipc_s;
        ipc_s = pop[pop_size + temp_inum].code;
        Parrot_dump_from_to(interp, ipc_s, &*(ipc_s + pop[pop_size + temp_inum].len) );
    }


    /* return length of individual inum */
    METHOD indi_len (INTVAL inum) {
        // pop[num] individual len
        INTVAL len;
        len = pop[inum].len;
        RETURN(INTVAL len);
    }

    /* return length of temporary individual temp_inum */
    METHOD temp_indi_len (INTVAL temp_inum) {
        // pop[pop_size + temp_inum] individual len
        INTVAL len;
        len = pop[pop_size + temp_inum].len;
        RETURN(INTVAL len);
    }


    /* return fitness of individual inum */
    METHOD indi_fitness (INTVAL inum) {
        // pop[num] individual fitness
        INTVAL fitness;
        fitness = pop[inum].fitness;
        RETURN(INTVAL fitness);
    }

    /* return fitness of temporary individual temp_inum to fitness */
    METHOD temp_indi_fitness (INTVAL temp_inum) {
        // pop[pop_size + temp_inum] individual fitness
        INTVAL fitness;
        fitness = pop[pop_size + temp_inum].fitness;
        RETURN(INTVAL fitness);
    }


    /* set fitness of individual inum */
    METHOD set_indi_fitness (INTVAL inum, INTVAL fitness) {
        // set pop[num] individual fitness
        pop[inum].fitness = fitness;
    }

    /* set fitness of temporary individual temp_inum to fitness */
    METHOD set_temp_indi_fitness (INTVAL temp_inum, INTVAL fitness) {
        // set pop[pop_size + temp_inum] individual fitness
        pop[pop_size + temp_inum].fitness = fitness;
    }


    /* copy body of individual inum to eval_space */
    METHOD load_indi (INTVAL inum) {
        opcode_t *ipc_src;
        ipc_src = pop[inum].code;
        // PIO_eprintf(interp, "Will copy %i bytes, from %p to %p\n", (INDI_MAX_LEN*sizeof(opcode_t)), ipc_src, ipc_start );
        memcpy(ipc_start, ipc_src, (INDI_MAX_LEN*sizeof(opcode_t)) );
    }

    /*
        Return FixedPMCArray of distinct random numbers of individuals sorted by fitness.
        Used for fight.
        TODO: Useful only for FIGHT_NUM=2.
    */
    METHOD get_parents () {
        INTVAL r_inums[4];
        PMC *array;

        r_inums[0] = rand() % pop_size;

        do {
            r_inums[1] = rand() % pop_size;
        } while ( r_inums[1] == r_inums[0] );

        do {
            r_inums[2] = rand() % pop_size;
        } while ( r_inums[2] == r_inums[0] || r_inums[2] == r_inums[1] );

        do {
            r_inums[3] = rand() % pop_size;
        } while ( r_inums[3] == r_inums[0] || r_inums[3] == r_inums[1] || r_inums[3] == r_inums[2] );

        //PIO_eprintf(interp, "unsorted nums: %i (%i), %i (%i), %i (%i), %i (%i)\n", r_inums[0], pop[r_inums[0]].fitness, r_inums[1], pop[ r_inums[1] ].fitness, r_inums[2], pop[ r_inums[2] ].fitness, r_inums[3], pop[ r_inums[3] ].fitness  );
        Parrot_quicksort_fitness(r_inums, 0, 4-1);
        //PIO_eprintf(interp, "unsorted nums: %i (%i), %i (%i), %i (%i), %i (%i)\n", r_inums[0], pop[r_inums[0]].fitness, r_inums[1], pop[r_inums[1]].fitness, r_inums[2], pop[r_inums[2]].fitness, r_inums[3], pop[r_inums[3]].fitness  );

        array = pmc_new(interp, enum_class_FixedPMCArray);
        VTABLE_set_integer_native(interp, array, 4);
        VTABLE_set_integer_keyed_int(interp, array, 0, r_inums[0] );
        VTABLE_set_integer_keyed_int(interp, array, 1, r_inums[1] );
        VTABLE_set_integer_keyed_int(interp, array, 2, r_inums[2] );
        VTABLE_set_integer_keyed_int(interp, array, 3, r_inums[3] );
        RETURN(PMC *array);
    }

    /*
        Copy individual inum to temporary individual temp_inum.
        Used before apply of genetic operators.
    */
    METHOD copy_to_temp (INTVAL inum, INTVAL temp_inum) {
        memcpy( &pop[pop_size + temp_inum], &pop[inum], sizeof(t_lgp_indi) );
    }


    /*
        Rewrite individual inum by temporary individual temp_inum.
        Used after fight to replace loosers.
    */
    METHOD rewrite_by_temp (INTVAL inum, INTVAL temp_inum) {
        memcpy( &pop[inum], &pop[pop_size + temp_inum], sizeof(t_lgp_indi) );
    }


    /*
        TODO: Mutate individual temp_inum.
    */
    METHOD mutate_temp (INTVAL temp_inum) {
        // [operation code] [operands]*
        opcode_t *ipc_ti;
        ipc_ti = pop[pop_size + temp_inum].code;
    }


    /*
        Naive implementation of some types of mutate operator.
    */
    METHOD mutate_temp_naive (INTVAL temp_inum) {
        #define DEBUG 0
        size_t rand_position;
        opcode_t *ipc_s;
        opcode_t *pc, *pc_end;
        op_info_t* info;
        int i, j, last_op_count, rand_i;
        int r_ins_num, op_num;
        INTVAL r_op_num = 0;
        op_info_t* r_info;
        opcode_t *pc_begin;

        if ( pop[pop_size + temp_inum].len <= 1 ) {
            return;
        }

        // random position inside indi code
        rand_position = rand() % (pop[pop_size + temp_inum].len - 1); // last instruction is 'ret'
        // rand_position = 0; // debug
        // rand_position = pop[pop_size + temp_inum].len - 2; // debug

        // [operation code] [operands]*
        ipc_s = pop[pop_size + temp_inum].code;
        // Parrot_dump_from_to(interp, ipc_s, &*(ipc_s + pop[pop_size + temp_inum].len) );

        pc = ipc_s;
        pc_end = &*(ipc_s + rand_position);
        #if DEBUG
            //PIO_printf(interp, "----- ----- ----- ----- -----\n" );
            PIO_printf(interp, "rand pos %i (len %i)\n", rand_position, pop[pop_size + temp_inum].len );
        #endif
        info = &interp->op_info_table[*pc];

        r_ins_num = 1;
        op_num = 0;
        op_num += info->op_count;

        // find begin of instructio
        while ( pc + info->op_count <= pc_end ) {
            #if DEBUG
                //PIO_printf(interp, "%3i +%1i %3i %p %4ld %s\n", r_ins_num, info->op_count, op_num, pc, *pc, info->full_name );
            #endif
            pc += info->op_count;
            info = &interp->op_info_table[*pc];
            r_ins_num++;
            op_num += info->op_count;
        };
        //PIO_printf(interp, "\n" );

        rand_i = rand() % 100;
        #if DEBUG
            rand_i = 76; // debug only selected operation
        #endif
        // mutate operands
        // 60%
        if ( rand_i < 60 ) {
            #if DEBUG
                PIO_printf(interp, "mutate operands\n" );
                Parrot_dump_from_to(interp, pc, pc+info->op_count);
            #endif
            INTVAL r_i;
            i = 0;
            if ( (info->op_count) > 1 ) {
                // get random op num
                // gets one of [1,2] if op_count = 3
                r_op_num = rand() % ( info->op_count - 1 ) + 1;
                //PIO_printf(interp, "r_op_num: %i, op_count: %i\n", r_op_num, info->op_count );
                switch (info->types[r_op_num]) {
                    case PARROT_ARG_I:
                    default:
                        r_i = rand() % (lgp_out_reg_count + lgp_in_reg_count);
                        if ( r_i < lgp_out_reg_count ) {
                            r_i = lgp_out_regs[ r_i ];
                        } else {
                            r_i -= lgp_out_reg_count;
                            r_i = lgp_in_regs[ r_i ];
                        }
                        //PIO_printf(interp, "r_i %i z %i: %i\n", j+1, (info->op_count-1), r_i );
                        *(pc + r_op_num) = r_i;
                        break;
                }
            }

            #if DEBUG
                PIO_printf(interp, "rand %i, %i\n", r_ins_num, r_op_num );
                Parrot_dump_from_to(interp, pc, pc + info->op_count);
                PIO_printf(interp, "\n" );
                //PIO_printf(interp, "----- ----- ----- ----- -----\n" );
            #endif

        // reduction operator - remove instruction
        // 60-75 ... 15%
        } else if ( rand_i < 75 ) {
            #if DEBUG
                PIO_printf(interp, "reduction operator\n" );
                Parrot_dump_from_to(interp, pc, pc+info->op_count);
            #endif

            /*
            int len;
            len = &*(ipc_s + pop[pop_size + temp_inum].len) - (pc + info->op_count);
            PIO_printf(interp, "len to copy: %p, %p, %i \n", pc+info->op_count, pc, len );
            memcpy(pc, &*(pc+info->op_count), len );
            pop[pop_size + temp_inum].len -= info->op_count;
            */

            i = info->op_count;
            pc_end = &*(ipc_s + pop[pop_size + temp_inum].len) - i;
            while ( pc < pc_end ) {
                *pc = *(pc + i);
                pc++;
            }
            pop[pop_size + temp_inum].len -= i;

        // insertion operator
        // 75-80 ... 5%
        } else if ( rand_i < 80 ) {
            #if DEBUG
                PIO_printf(interp, "insertion operator\n" );
                Parrot_dump_from_to(interp, pc, pc+info->op_count);
            #endif
            // already has max length
            if ( pop[pop_size + temp_inum].len >= INDI_MAX_LEN ) {
                #if DEBUG
                    PIO_printf(interp, "indi is already too long\n" );
                #endif
                return;
            }

            i = info->op_count;
            // already has max length
            if ( pop[pop_size + temp_inum].len + i > INDI_MAX_LEN ) {
                #if DEBUG
                    PIO_printf(interp, "indi is too long for this insertion\n" );
                #endif
                return;
            }

            pc_begin = pc + i - 1;
            pc_end = &*(ipc_s + pop[pop_size + temp_inum].len) + i - 1;
            pc = pc_end;

            #if DEBUG
                PIO_printf(interp, "%p %p %p %i %i %i\n", pc_begin, (pc_end-i), pc_end, *pc_begin, *(pc_end-i), *pc_end );
            #endif
            while ( pc > pc_begin ) {
                #if DEBUG
                    PIO_printf(interp, "%p %i -> %p %i\n", (pc-i), *(pc-i), pc, *pc );
                #endif
                *pc = *(pc - i);
                pc--;
            }
            pop[pop_size + temp_inum].len += i;


        // mutate instruction num to instruction of same length
        // 20%
        } else {
            #if DEBUG
                PIO_printf(interp, "mutate instruction num\n" );
                Parrot_dump_from_to(interp, pc, pc+info->op_count);
            #endif
            op_info_t* r_info;
            INTVAL op_num;
            // find same length or shorter instruction
            do {
                // random instruction number
                r_op_num = lgp_ops[ rand() % lgp_op_count ];
                r_info = &interp->op_info_table[r_op_num];
                //PIO_printf(interp, "%i (%i), ", r_op, info->op_count-1 );
            } while ( r_info->op_count > info->op_count );
            #if DEBUG
                PIO_printf(interp, "ins %i -> %i, op_count %i -> %i\n", *pc, r_op_num, info->op_count, r_info->op_count );
            #endif
            // random instruction
            *pc = r_op_num;
            for ( i=r_info->op_count; i<info->op_count; i++ ) {
                //PIO_printf(interp, "%i\n", i );
                *(pc + i) = 1; // noop
            }

            #if DEBUG
                PIO_printf(interp, "rand %i, %i\n", r_ins_num, r_op_num );
                Parrot_dump_from_to(interp, pc, pc + info->op_count);
                PIO_printf(interp, "\n" );
                //PIO_printf(interp, "----- ----- ----- ----- -----\n" );
            #endif
        }
    }

    METHOD load_temp_indi (INTVAL temp_inum) {
        opcode_t *ipc_src;
        ipc_src = pop[pop_size + temp_inum].code;
        // PIO_eprintf(interp, "Will copy %i bytes, from %p to %p\n", (INDI_MAX_LEN*sizeof(opcode_t)), ipc_src, ipc_start );
        memcpy(ipc_start, ipc_src, (INDI_MAX_LEN*sizeof(opcode_t)) );
    }


    /*
        Print dump of eval space.
    */
    METHOD es_mdump () {
        // eval space memory dump
        PIO_printf(interp, "eval code start: %p\n", epc_start );
        PIO_printf(interp, "indi core start: %p, indi relative start: %i\n", ipc_start, (INTVAL)(ipc_start-epc_start) );
        PIO_printf(interp, "indi core end  : %p, indi relative end  : %i, indi len: %i\n",
            ipc_end,
            (INTVAL)(ipc_end-epc_start),
            (INTVAL)(ipc_end-ipc_start)
        );
        PIO_printf(interp, "eval code end  : %p, eval relative end  : %i\n", epc_end, (INTVAL)(epc_end-epc_start) );
    }


    /*
        Print raw dump of eval space.
    */
    METHOD es_cdump () {
        // eval space code dump
        Parrot_dump_from_to(interp, epc_start, epc_end);
    }

    /*
        Print raw dump of invididula part of eval space.
    */
    METHOD ic_cdump () {
        // eval space individual core dump
        Parrot_dump_from_to(interp, ipc_start, ipc_end);
    }


    /* Return maximum allowed population size. */
    METHOD max_pop_size () {
        INTVAL size;
        size = (INTVAL) MAX_POP_SIZE;
        RETURN(INTVAL size);
    }

    /* Return maximum allowed length of individual. */
    METHOD indi_max_len () {
        INTVAL len;
        len = (INTVAL) INDI_MAX_LEN;
        RETURN(INTVAL len);
    }

    /* Return actual population size. */
    METHOD pop_size () {
        RETURN(INTVAL pop_size);
    }

    /* Return number of available instruction. */
    METHOD ops_num () {
        RETURN(INTVAL lgp_op_count);
    }

    /* Return list of available instructions. */
    METHOD ops () {
        PMC *array;
        int i;
        array = pmc_new(interp, enum_class_FixedPMCArray);
        VTABLE_set_integer_native(interp, array, lgp_op_count );
        for ( i = 0; i < lgp_op_count; i++) {
            VTABLE_set_integer_keyed_int(interp, array, i, (INTVAL)lgp_ops[i] );
        }
        RETURN(PMC *array);
    }
}
