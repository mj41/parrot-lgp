#include "parrot/parrot.h"
#include "lgp_conf.h"

int init_done = 0;
opcode_t *epc_start;
opcode_t *epc_end;
opcode_t *ipc_start;
opcode_t *ipc_end;


static void
Parrot_dump_from_to (Interp* interp, opcode_t *pc, opcode_t *pc_end) {

	//PIO_printf(interp, "----- %p\n", pc );
	//PIO_printf(interp, "----- %p\n", pc_end );
	op_info_t* info;
	int j;
	while ( pc < pc_end ) {
		info = &interp->op_info_table[*pc];
		// p = full_name ? info->full_name : info->name;
		PIO_printf(interp, "%p", pc );

		// PIO_printf(interp, " %3i", ( pc - sub->seg->base.data ) / sizeof(*pc) );
		PIO_printf(interp, " +%d", info->op_count );

		PIO_printf(interp, " %4ld", *pc );
		PIO_printf(interp, " %s", info->full_name );
		for (j = 1; j < info->op_count; j++) {
			INTVAL i = 0;
			switch (info->types[j-1]) {
				case PARROT_ARG_I:
					PIO_printf(interp," I");
					goto INTEGER;
				case PARROT_ARG_N:
					PIO_printf(interp," N");
					goto INTEGER;
				case PARROT_ARG_S:
					PIO_printf(interp," S");
					goto INTEGER;
				case PARROT_ARG_P:
					PIO_printf(interp," P");
					goto INTEGER;
				case PARROT_ARG_IC:
					PIO_printf(interp," ");
					if ((j == info->op_count - 1) &&
						(info->jump & PARROT_JUMP_RELATIVE))
					{
						if (pc[j] > 0) PIO_printf(interp,"+");
						i = pc[j];
					}

					INTEGER:
					if (i == 0) i = (INTVAL) pc[j];
					PIO_printf(interp, INTVAL_FMT, i);
					break;

				default:
					PIO_printf(interp, " |" );
					PIO_printf(interp, INTVAL_FMT, (INTVAL) pc[j]);
					PIO_printf(interp, "|" );
					break;

			}
			if (j != info->op_count - 1)
				PIO_printf(interp,",");
		}

		PIO_printf(interp, "\n" );
		pc += info->op_count;
	}
}


pmclass LGP dynpmc need_ext extends Sub {

    void* invoke (void* next) {
        struct Parrot_sub * const sub = PMC_sub(SELF);
        opcode_t *pc;
        opcode_t *pc_end;

		// todo - move to init_indi method
		if ( ! init_done ) {
			// find INDI_CORE
			op_info_t* info;
			epc_start = sub->seg->base.data + sub->start_offs;
			epc_end = sub->seg->base.data + sub->end_offs;

			pc = epc_start;
			if ( *pc != 15 ) {
				PIO_printf(INTERP, "First instruction is not bsr\n");
				exit;
			}
			PIO_printf(INTERP, "bsr to +%ld\n", (INTVAL) pc[1] );
			ipc_start = pc + pc[1];
			info = &INTERP->op_info_table[*pc];
			pc += info->op_count;
			ipc_end = epc_end;

			init_done = 1;
		}

		return SUPER(next);
	}


    METHOD void init_indi () {
		// replace "bsr INDI_CORE" with "noop", "noop"
		*(epc_start + 0) = 1;
		*(epc_start + 1) = 1;

		srand((unsigned) time(NULL) );
	}


    METHOD void initialize (INTVAL indi_num) {
		opcode_t *ipc_s, *ipc;
		ipc_s = pop[indi_num].code;

		INTVAL g_last, last;
		g_last = rand() % (INDI_MAX_LEN-1) + 1;
		pop[indi_num].fitness = 0;
		pop[indi_num].len = g_last + 1;

		//PIO_printf(INTERP, "b--- %p %i (+%i)\n", ipc, *ipc, g_last );
		ipc = &*(ipc_s + g_last);
		*ipc = (INTVAL)16; // ret
		//PIO_printf(INTERP, "r--- %p %i\n", ipc, *ipc );
		last = g_last - 1;

		INTVAL r_op, r_i, j;
		op_info_t *info;
		while ( last >= 0 ) {
			//PIO_printf(INTERP, "----------------- %i z %i\n", last+1, g_last+1);
			//PIO_printf(INTERP, "r_op: " );
			do {
				r_op = lgp_ops[ rand() % lgp_op_count ];
	  			info = &INTERP->op_info_table[r_op];
				//PIO_printf(INTERP, "%i (%i), ", r_op, info->op_count-1 );
			} while ( info->op_count-1 > last );
			//PIO_printf(INTERP, "%s \n", info->full_name );
			ipc = &*(ipc - info->op_count);
			*ipc = r_op;
			//Parrot_dump_from_to(INTERP, ipc_s, &*(ipc_s + pop[indi_num].len) );
			//PIO_printf(INTERP, "\n");

			for (j = 0; j < (info->op_count-1); j++) {
				switch (info->types[j]) {
					case PARROT_ARG_I:
						r_i = rand() % lgp_in_reg_count;
						//PIO_printf(INTERP, "r_i %i z %i: %i\n", j+1, (info->op_count-1), r_i );
						*(ipc+j+1) = r_i;
						break;
					default:
						PIO_eprintf(INTERP, "Can't generate operand with type=%i, op_count=%i\n", info->types[j], info->op_count );
						exit;
						break;
				}
			}
			last = last - info->op_count;
			//Parrot_dump_from_to(INTERP, ipc_s, &*(ipc_s + pop[indi_num].len ) );
		}
    }


    METHOD void indi_code (INTVAL indi_num) {
		// pop[num] individual code dump
		opcode_t *ipc_s;
		ipc_s = pop[indi_num].code;
		Parrot_dump_from_to(INTERP, ipc_s, &*(ipc_s + pop[indi_num].len ) );
    }


    METHOD INTVAL indi_len (INTVAL indi_num) {
		// pop[num] individual len
		return pop[indi_num].len;
    }


    METHOD void load_indi (INTVAL indi_num) {
		opcode_t *ipc_src;
		ipc_src = pop[indi_num].code;
		// PIO_eprintf(INTERP, "Can't %i\n", (INDI_MAX_LEN*sizeof(opcode_t)) );
		// todo sizeof
		memcpy(ipc_start, ipc_src, (INDI_MAX_LEN*sizeof(opcode_t)) );
	}


    METHOD void eb_mdump () {
		// eval body memory dump
		PIO_printf(INTERP, "eval code start: %p\n", epc_start );
		PIO_printf(INTERP, "indi core start: %p, indi relative start: %i\n", ipc_start, (INTVAL)(ipc_start-epc_start) );
		PIO_printf(INTERP, "indi core end  : %p, indi relative end  : %i, indi len: %i\n",
			ipc_end,
			(INTVAL)(ipc_end-epc_start),
			(INTVAL)(ipc_end-ipc_start)
		);
		PIO_printf(INTERP, "eval code end  : %p, eval relative end  : %i\n", epc_end, (INTVAL)(epc_end-epc_start) );
	}


    METHOD void eb_cdump () {
		// eval body code dump
		Parrot_dump_from_to(INTERP, epc_start, epc_end);
    }


    METHOD void ei_cdump () {
		// eval body individual part code dump
		Parrot_dump_from_to(INTERP, ipc_start, ipc_end);
    }


    METHOD INTVAL ops_num () {
		return lgp_op_count;
	}


	METHOD PMC* ops () {
		PMC *array;
		array = pmc_new(interpreter, enum_class_FixedPMCArray);
		VTABLE_set_integer_native(interpreter, array, lgp_op_count );
		int i;
		for ( i = 0; i < lgp_op_count; i++) {
            VTABLE_set_integer_keyed_int(INTERP, array, i, (INTVAL)lgp_ops[i] );
		}
		return array;
	}


    METHOD STRING* test () {
		char cstr[20];
		char *str = cstr;

        struct Parrot_sub * const sub = PMC_sub(SELF);
        opcode_t *pc;
        pc = ipc_start;

		op_info_t* info;
  		info = &interpreter->op_info_table[*pc];
    	strcpy(str, info->full_name );

		STRING *sstr;
		sstr = string_from_cstring(interpreter, str, strlen(str));
		mem_sys_free(str);
		return sstr;
    }

}

